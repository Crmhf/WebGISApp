var VSHADER_SOURCE="attribute vec4 a_Position;\nuniform float u_CosB, u_SinB;\nvoid main() {\n  gl_Position.x = a_Position.x * u_CosB - a_Position.y * u_SinB;\n  gl_Position.y = a_Position.x * u_SinB + a_Position.y * u_CosB;\n  gl_Position.z = a_Position.z;\n  gl_Position.w = 1.0;\n}\n";var FSHADER_SOURCE="void main() {\n  gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n";var ANGLE=90;function main(){var a=document.getElementById("webgl");var g=getWebGLContext(a);if(!g){console.log("Failed to get the rendering context for WebGL");return}if(!initShaders(g,VSHADER_SOURCE,FSHADER_SOURCE)){console.log("Failed to intialize shaders.");return}var h=initVertexBuffers(g);if(h<0){console.log("Failed to set the positions of the vertices");return}var f=Math.PI*ANGLE/180;var d=Math.cos(f);var b=Math.sin(f);var e=g.getUniformLocation(g.program,"u_CosB");var c=g.getUniformLocation(g.program,"u_SinB");if(!e||!c){console.log("Failed to get the storage location of u_CosB or u_SinB");return}g.uniform1f(e,d);g.uniform1f(c,b);g.clearColor(0,0,0,1);g.clear(g.COLOR_BUFFER_BIT);g.drawArrays(g.TRIANGLES,0,h)}function initVertexBuffers(d){var a=new Float32Array([0,0.5,-0.5,-0.5,0.5,-0.5]);var e=3;var c=d.createBuffer();if(!c){console.log("Failed to create the buffer object");return -1}d.bindBuffer(d.ARRAY_BUFFER,c);d.bufferData(d.ARRAY_BUFFER,a,d.STATIC_DRAW);var b=d.getAttribLocation(d.program,"a_Position");if(b<0){console.log("Failed to get the storage location of a_Position");return -1}d.vertexAttribPointer(b,2,d.FLOAT,false,0,0);d.enableVertexAttribArray(b);return e};