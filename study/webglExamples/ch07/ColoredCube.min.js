var VSHADER_SOURCE="attribute vec4 a_Position;\nattribute vec4 a_Color;\nuniform mat4 u_MvpMatrix;\nvarying vec4 v_Color;\nvoid main() {\n  gl_Position = u_MvpMatrix * a_Position;\n  v_Color = a_Color;\n}\n";var FSHADER_SOURCE="#ifdef GL_ES\nprecision mediump float;\n#endif\nvarying vec4 v_Color;\nvoid main() {\n  gl_FragColor = v_Color;\n}\n";function main(){var b=document.getElementById("webgl");var d=getWebGLContext(b);if(!d){console.log("Failed to get the rendering context for WebGL");return}if(!initShaders(d,VSHADER_SOURCE,FSHADER_SOURCE)){console.log("Failed to intialize shaders.");return}var e=initVertexBuffers(d);if(e<0){console.log("Failed to set the vertex information");return}d.clearColor(0,0,0,1);d.enable(d.DEPTH_TEST);var c=d.getUniformLocation(d.program,"u_MvpMatrix");if(!c){console.log("Failed to get the storage location of u_MvpMatrix");return}var a=new Matrix4();a.setPerspective(30,1,1,100);a.lookAt(3,3,7,0,0,0,0,1,0);d.uniformMatrix4fv(c,false,a.elements);d.clear(d.COLOR_BUFFER_BIT|d.DEPTH_BUFFER_BIT);d.drawElements(d.TRIANGLES,e,d.UNSIGNED_BYTE,0)}function initVertexBuffers(e){var c=new Float32Array([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,1,-1,-1,1,-1,-1,1,1,-1,1,1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,-1,1,1,-1]);var b=new Float32Array([0.4,0.4,1,0.4,0.4,1,0.4,0.4,1,0.4,0.4,1,0.4,1,0.4,0.4,1,0.4,0.4,1,0.4,0.4,1,0.4,1,0.4,0.4,1,0.4,0.4,1,0.4,0.4,1,0.4,0.4,1,1,0.4,1,1,0.4,1,1,0.4,1,1,0.4,1,1,1,1,1,1,1,1,1,1,1,1,0.4,1,1,0.4,1,1,0.4,1,1,0.4,1,1]);var d=new Uint8Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]);var a=e.createBuffer();if(!a){return -1}if(!initArrayBuffer(e,c,3,e.FLOAT,"a_Position")){return -1}if(!initArrayBuffer(e,b,3,e.FLOAT,"a_Color")){return -1}e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,a);e.bufferData(e.ELEMENT_ARRAY_BUFFER,d,e.STATIC_DRAW);return d.length}function initArrayBuffer(f,e,b,c,d){var a=f.createBuffer();if(!a){console.log("Failed to create the buffer object");return false}f.bindBuffer(f.ARRAY_BUFFER,a);f.bufferData(f.ARRAY_BUFFER,e,f.STATIC_DRAW);var g=f.getAttribLocation(f.program,d);if(g<0){console.log("Failed to get the storage location of "+d);return false}f.vertexAttribPointer(g,b,c,false,0,0);f.enableVertexAttribArray(g);return true};