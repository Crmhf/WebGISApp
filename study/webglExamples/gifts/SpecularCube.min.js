var VSHADER_SOURCE="uniform mat4 u_perspectiveMatrix;\nuniform mat4 u_modelMatrix;\nuniform mat4 u_viewMatrix;\nattribute vec4 a_Position;\nattribute vec3 a_Normal;\nvarying vec4 v_Position;\nvarying vec3 v_Normal;\nvoid main() {\n  mat4 modelViewMatrix = u_viewMatrix * u_modelMatrix;\n  v_Position = modelViewMatrix * a_Position;\n  gl_Position = u_perspectiveMatrix * v_Position;\n  v_Normal = normalize( mat3(modelViewMatrix) * a_Normal);\n}\n";var FSHADER_SOURCE="#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform mat4 u_fViewMatrix;\nuniform vec3 u_lightPosition;\nvarying vec4 v_Position;\nvarying vec3 v_Normal;\nvoid main() {\n  vec3 normal = normalize(v_Normal);\n  vec3 lightPosition = vec3(u_fViewMatrix * vec4(u_lightPosition, 1) - v_Position);\n  vec3 lightDir = normalize(lightPosition);\n  float lightDist = length(lightPosition);\n  float specular = 0.0;\n  float d = max(dot(v_Normal, lightDir), 0.0);\n  if (d > 0.0) {\n    vec3 viewVec = vec3(0,0,1.0);\n    vec3 reflectVec = reflect(-lightDir, normal);\n    specular = pow(max(dot(reflectVec, viewVec), 0.0), 120.0);\n  }\n  gl_FragColor.rgb = vec3(0.1,0.1,0.1) + vec3(0.4, 0.4, 0.4) * d + specular;\n  gl_FragColor.a = 1.0;\n}\n";var g_perspectiveMatrix=new Matrix4();var g_modelMatrix=new Matrix4();var g_viewMatrix=new Matrix4();var g_vertexPositionBuffer;var g_vertexNormalBuffer;var g_vertexIndexBuffer;function main(){var a=document.getElementById("webgl");var f=getWebGLContext(a);if(!f){console.log("Failed to get the rendering context for WebGL");return}if(!initShaders(f,VSHADER_SOURCE,FSHADER_SOURCE)){console.log("Failed to intialize shaders.");return}var g=f.getUniformLocation(f.program,"u_perspectiveMatrix");var b=f.getUniformLocation(f.program,"u_modelMatrix");var i=f.getUniformLocation(f.program,"u_viewMatrix");var d=f.getUniformLocation(f.program,"u_lightPosition");var h=f.getUniformLocation(f.program,"u_fViewMatrix");f.enable(f.DEPTH_TEST);f.clearColor(0,0,0,1);sendCubeVertexBuffers(f);var c=0;var e=function(){window.requestAnimationFrame(e);c+=0.3;drawCommon(f,a,c,g,i,d,h);drawCube(f,a,c,g,b,d)};e()}function drawCommon(h,e,g,c,a,f,d){h.clear(h.COLOR_BUFFER_BIT|h.DEPTH_BUFFER_BIT);g_perspectiveMatrix.setPerspective(30,e.width/e.height,1,10000);g_viewMatrix.setLookAt(0,3,10,0,0,0,0,1,0);h.uniformMatrix4fv(c,false,g_perspectiveMatrix.elements);h.uniformMatrix4fv(a,false,g_viewMatrix.elements);h.uniformMatrix4fv(d,false,g_viewMatrix.elements);var b=new Float32Array([2,0,2]);h.uniform3fv(f,b)}function drawCube(h,c,g,b,a,e){h.bindBuffer(h.ARRAY_BUFFER,g_vertexPositionBuffer);var d=h.getAttribLocation(h.program,"a_Position");h.vertexAttribPointer(d,3,h.FLOAT,false,0,0);h.enableVertexAttribArray(d);h.bindBuffer(h.ARRAY_BUFFER,g_vertexNormalBuffer);var f=h.getAttribLocation(h.program,"a_Normal");h.vertexAttribPointer(f,3,h.FLOAT,false,0,0);h.enableVertexAttribArray(f);h.bindBuffer(h.ELEMENT_ARRAY_BUFFER,g_vertexIndexBuffer);g_modelMatrix.setTranslate(0,0,0);g_modelMatrix.rotate(g,0,1,0);g_modelMatrix.scale(1,1,1);h.uniformMatrix4fv(a,false,g_modelMatrix.elements);h.drawElements(h.TRIANGLES,36,h.UNSIGNED_BYTE,0)}function sendCubeVertexBuffers(d){var c=new Float32Array([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,1,-1,-1,1,-1,-1,1,1,-1,1,1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,-1,1,1,-1]);var a=new Float32Array([0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1]);var b=new Uint8Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]);g_vertexPositionBuffer=d.createBuffer();g_vertexNormalBuffer=d.createBuffer();g_vertexIndexBuffer=d.createBuffer();d.bindBuffer(d.ARRAY_BUFFER,g_vertexPositionBuffer);d.bufferData(d.ARRAY_BUFFER,c,d.STATIC_DRAW);d.bindBuffer(d.ARRAY_BUFFER,g_vertexNormalBuffer);d.bufferData(d.ARRAY_BUFFER,a,d.STATIC_DRAW);d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,g_vertexIndexBuffer);d.bufferData(d.ELEMENT_ARRAY_BUFFER,b,d.STATIC_DRAW);return true};